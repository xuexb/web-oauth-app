name: Deploy Prod

on:
  workflow_call:
    inputs:
      version:
        description: '镜像版本'
        default: 'latest'
        required: false
        type: string
    secrets:
      SSH_HOST:
        required: true
      SSH_USERNAME:
        required: true
      SSH_KEY:
        required: true
      SSH_PORT:
        required: true
      GHCR_ACCESS_TOKEN:
        required: true
      MYSQL_USER:
        required: true
      MYSQL_PASSWORD:
        required: true
      MYSQL_DATABASE:
        required: true
      MYSQL_HOST:
        required: true
      MYSQL_PORT:
        required: true
      OAUTH_GITHUB_CLIENT_ID:
        required: true
      OAUTH_GITHUB_CLIENT_SECRET:
        required: true
      OAUTH_QQ_APPID:
        required: true
      OAUTH_QQ_APPKEY:
        required: true
      OAUTH_QQ_CALLBACK:
        required: true
      OAUTH_WEIBO_APPKEY:
        required: true
      OAUTH_WEIBO_APPSECRET:
        required: true
      OAUTH_WEIBO_CALLBACK:
        required: true
      OAUTH_BAIDU_APPKEY:
        required: true
      OAUTH_BAIDU_SECRETKEY:
        required: true
      OAUTH_BAIDU_CALLBACK:
        required: true
  workflow_dispatch:
    inputs:
      version:
        description: '镜像版本'
        default: 'latest'
        required: false
        type: string

env:
  REPO: xuexb/web-oauth-app
  IMAGE_VERSION: ${{ inputs.version || github.event.inputs.version }}
  REPOSITORY_TAG: ghcr.io/xuexb/web-oauth-app:${{ inputs.version || github.event.inputs.version }}
  OWNER: xuexb
  CONTAINER_NAME: web-oauth-app
  CONTAINER_PORT: 8081
  WEB_URL: https://web-oauth-app.xuexb.com

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.check_version.outputs.HTTP_CODE }}
    steps:
      - name: Generate Token
        id: generate_token
        run: |
          TOKEN=`curl -su ${{ env.OWNER }}:${{ secrets.GHCR_ACCESS_TOKEN }} https://ghcr.io/token\?scope\="repository:${{ env.REPO }}:pull" | awk -F '"' '{print $4}'`
          echo "::set-output name=GHCR_PULL_TOKEN::$TOKEN"
      - name: Check version
        id: check_version
        if: ${{ steps.generate_token.conclusion == 'success' }}
        run: |
          HTTP_CODE=`curl -sL -w '%{http_code}' --connect-timeout 5 -H 'Authorization: Bearer ${{ steps.generate_token.outputs.GHCR_PULL_TOKEN }}' https://ghcr.io/v2/${{ env.REPO }}/manifests/${{ env.IMAGE_VERSION }} -o /dev/null`
          if [ "$HTTP_CODE" == "200" ]; then
            echo "::set-output name=HTTP_CODE::$HTTP_CODE"
          else
            echo "curl https://ghcr.io/v2/${{ env.REPO }}/manifests/${{ env.IMAGE_VERSION }} Response => $HTTP_CODE"
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: check-version
    if: ${{ needs.check-version.outputs.result == '200' }}
    steps:
      - name: 'deploy prod'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          debug: true
          script: |
            docker pull ${{ env.REPOSITORY_TAG }} \
              && docker ps -q --filter "name=${{ env.CONTAINER_NAME }}" | xargs docker rm -f \
              && docker run \
                -p ${{ env.CONTAINER_PORT }}:8080 \
                --rm \
                -d \
                --name ${{ env.CONTAINER_NAME }} \
                --env MYSQL_USER=${{ env.MYSQL_USER }} \
                --env MYSQL_PASSWORD=${{ env.MYSQL_PASSWORD }} \
                --env MYSQL_DATABASE=${{ env.MYSQL_DATABASE }} \
                --env MYSQL_HOST=${{ env.MYSQL_HOST }} \
                --env MYSQL_PORT=${{ env.MYSQL_PORT }} \
                --env OAUTH_GITHUB_CLIENT_ID=${{ env.OAUTH_GITHUB_CLIENT_ID }} \
                --env OAUTH_GITHUB_CLIENT_SECRET=${{ env.OAUTH_GITHUB_CLIENT_SECRET }} \
                --env OAUTH_QQ_APPID=${{ env.OAUTH_QQ_APPID }} \
                --env OAUTH_QQ_APPKEY=${{ env.OAUTH_QQ_APPKEY }} \
                --env OAUTH_QQ_CALLBACK=${{ env.OAUTH_QQ_CALLBACK }} \
                --env OAUTH_WEIBO_APPKEY=${{ env.OAUTH_WEIBO_APPKEY }} \
                --env OAUTH_WEIBO_APPSECRET=${{ env.OAUTH_WEIBO_APPSECRET }} \
                --env OAUTH_WEIBO_CALLBACK=${{ env.OAUTH_WEIBO_CALLBACK }} \
                --env OAUTH_BAIDU_APPKEY=${{ env.OAUTH_BAIDU_APPKEY }} \
                --env OAUTH_BAIDU_SECRETKEY=${{ env.OAUTH_BAIDU_SECRETKEY }} \
                --env OAUTH_BAIDU_CALLBACK=${{ env.OAUTH_BAIDU_CALLBACK }} \
                ${{ env.REPOSITORY_TAG }}

  test:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ needs.deploy.result == 'success' }}
    steps:
      - name: Curl Proxy URL 200
        run: |
          if [ "$(curl -sL -w '%{http_code}' --connect-timeout 3 ${{ env.WEB_URL }}?r=$RANDOM -o /dev/null)" != "200" ]; then
            exit 1
          fi
      - name: Curl Proxy URL body `<html>`
        run: |
          if [ "$(curl -sL --connect-timeout 3 ${{ env.WEB_URL }}?r=$RANDOM | grep '<html')" == "" ]; then
            exit 1
          fi
      - name: 'Log in to the machine to test the local service'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          debug: true
          script: |
            if [ "$(curl -sL -w '%{http_code}' --connect-timeout 3 http://127.0.0.1:${{ env.CONTAINER_PORT }}?r=$RANDOM -o /dev/null)" != "200" ]; then
              exit 1
            fi
            if [ "$(curl -sL --connect-timeout 3 http://127.0.0.1:${{ env.CONTAINER_PORT }}?r=$RANDOM | grep '<html')" == "" ]; then
              exit 1
            fi